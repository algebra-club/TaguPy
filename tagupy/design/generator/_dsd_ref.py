import numpy as np
from typing import List

_gen_vec = {
    4: [0, -1, 1],
    6: [0, -1, 1, 1, -1],
    8: [0, 1, 1, -1, 1, -1, -1],
    10: [[0, 1, -1, -1, 1], [-1, 1, 1, 1, 1]],
    12: [0, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1],
    14: [0, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1],
    16: [],
    18: [0, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1],
    20: [0, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1],
    22: [[0, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1], [0, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1]],
    24: [0, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1],
    26: [[0, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1], [-1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1]],
    28: [[0, 1, 1, 1, -1, -1, -1], [1, -1, 1, -1, 1, -1, -1], [1, 1, -1, 1, 1, -1, -1], [1, 1, 1, -1, 1, 1, 1]],
    30: [0, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1],
    32: [0, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1],
    34: [[0, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1], [1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1]],
    36: [[0, 1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, -1, 1, -1, 1, -1, -1], [1, 1, -1, -1, -1, 1, -1, -1, -1], [1, 1, 1, 1, 1, -1, 1, 1, -1]],
    38: [0, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1],
    40: [],
    42: [0, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1],
    44: [0, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1],
    46: [],
    48: [0, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1],
    50: [[0, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1], [1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1]],
    }

def _cmateq5(sum_fac: int, gen_vec: dict[int, List[int]]) ->np.ndarray:
    '''
    create a conference matrix of sum_fac: 4, 6, 8, 12, 14, 18, 20, 24, 30, 32, 38, 42, 44, 48

    Parameters
    ----------
    sum_fac: int
        sum of the number of factors(n_fac) and the number of fake factor
    gen_vec: dict[int, List[int]]
        list of vectors used for generating conference matrix
    
    returns
    -------
    cmat: np.ndarray(sum_fac * sum_fac if sum_fac is even) 
        conference matrix

    Note
    ----
    conference matrices are constructed as:
    ([0, ones(1, sum_fac - 1)],
     [ones(sum_fac - 1, 0), S])
    S is a circulant (0, ±1)-matrix of order(sum_fac - 1), which is generated by gen_vec
    '''
    v = gen_vec[sum_fac]
    s = np.concatenate([np.roll(v, i).reshape(1,-1) for i in range(len(v))], axis=0)
    one_vec = np.array([1 for i in range(sum_fac-1)]).reshape(-1, 1)
    temp0 = np.concatenate([np.array([0]), -one_vec.reshape(-1)]).reshape(1, -1)
    temp1 = np.concatenate([one_vec, s], axis=1)
    c_mat = np.concatenate([temp0, temp1], axis=0)
    
    return c_mat


def _cmateq2(sum_fac: int, gen_vec: dict[int, List[List[int]]]) ->np.ndarray:
    '''
    create a conference matrix of sum_fac: 10, 22, 26, 34, 50

    Parameters
    ----------
    sum_fac: int
        sum of the number of factors(n_fac) and the number of fake factor
    gen_vec: dict[int, List[int]]
        list of vectors used for generating conference matrix
    
    returns
    -------
    cmat: np.ndarray(sum_fac * sum_fac if sum_fac is even) 
        conference matrix

    Note
    ----
    If A is a (0, ±1)-matrix of order m and B a ±1-matrix of the same order such that AB = BA and AA′ + BB′ = (2m − 1)I_m×m, 
    then the following conference matrix of order 2m can be constructed:
    ([A, B],
     [B.T, -B.T])
    A and B are two circulant matrices generated by gen_vec

    Only for sum_fac = 22, alternative conference matrix is used based on the paper.
    See below for details.
    NGUYEN, N. & STYLIANOU, S. (2013).
    Constructing Definitive Screening Designs Using Cyclic Generators.
    Journal of Statistical Theory and Practice.
    DOI: 10.1080/15598608.2013.781891
    '''
    v0 = gen_vec[sum_fac][0]
    v1 = gen_vec[sum_fac][1]
    a = np.concatenate([np.roll(v0, i).reshape(1,-1) for i in range(len(v0))], axis=0)
    b = np.concatenate([np.roll(v1, i).reshape(1,-1) for i in range(len(v1))], axis=0)
    c_mat = np.block([
        [a, b],
        [b.T, -a.T]
    ])

    return c_mat


def _dsddb(sum_fac: int, gen_vec: dict[int, List[int]]) ->np.ndarray:
    '''
    create a conference matrix of sum_fac: 16, 40

    Parameters
    ----------
    sum_fac: int
        sum of the number of factors(n_fac) and the number of fake factor
    gen_vec: dict[int, List[int]]
        list of vectors used for generating conference matrix
    
    returns
    -------
    cmat: np.ndarray(sum_fac * sum_fac if sum_fac is even) 
        conference matrix

    Note
    ----
    If A is a (0, ±1)-matrix of order 1/2(sum_fac) and B a ±1-matrix of the same order such that 
    AB = BA and AA′ + BB′ = (sum_fac − 1)I_1/2(sum_fac),1/2(sum_fac), 
    then the following conference matrix of order sum_fac can be constructed:
    ([A, B],
     [B.T, -B.T])
    A is the conference matrix of the order 1/2(sum_fac) constructed by the gen_vec and B = A + I
    '''
    half_fac = int(sum_fac/2)
    a = _cmateq5(half_fac, gen_vec)
    b = a + np.eye(int(sum_fac/2))
    b = b.astype(int)
    c_mat = np.block([
        [a,b],
        [b.T, -a.T]
    ])

    return c_mat


def _dsdeq3(sum_fac: int, gen_vec: dict[int, List[int]]) ->np.ndarray:
    '''
    create a conference matrix of sum_fac: 28, 36

    Parameters
    ----------
    sum_fac: int
        sum of the number of factors(n_fac) and the number of fake factor
    gen_vec: dict[int, List[int]]
        list of vectors used for generating conference matrix
    
    returns
    -------
    cmat: np.ndarray(sum_fac * sum_fac if sum_fac is even) 
        conference matrix

    Note
    ----
    If A is a circulant (0,±1)-matrix of order 1/4(sum_fac) and B,C,D are circulant ±1-matrices of the same order such that
    AA′ + BB′ + CC′ + DD′ = (sum_fac − 1)I_1/4(sum_fac),1/4(sum_fac)
    then the following conference matrix of order sum_fac can be constructed:
    ([A, BR, CR, DR],
     [-BR, A, (D.T)R, -(C.T)R],
     [-CR, -(D.T)R, A, (B.T)R],
     [-DR, (C.T)R, -(B.T)R, A])
    A, B, C, and D are four circulant matrices generated by gen_vec
    '''
    a = np.concatenate([np.roll(gen_vec[sum_fac][0], i).reshape(1,-1) for i in range(len(gen_vec[sum_fac][0]))], axis=0)
    b = np.concatenate([np.roll(gen_vec[sum_fac][1], i).reshape(1,-1) for i in range(len(gen_vec[sum_fac][1]))], axis=0)
    c = np.concatenate([np.roll(gen_vec[sum_fac][2], i).reshape(1,-1) for i in range(len(gen_vec[sum_fac][2]))], axis=0)
    d = np.concatenate([np.roll(gen_vec[sum_fac][3], i).reshape(1,-1) for i in range(len(gen_vec[sum_fac][3]))], axis=0)
    r = np.eye(len(gen_vec[sum_fac][0]), dtype=int)[::-1]
    c_mat = np.block([
        [a, b @ r, c @ r, d @ r],
        [-b @ r, a, d.T @ r, -c.T @ r],
        [-c @ r, -d.T @ r, a, b.T @ r],
        [-d @ r, c.T @ r, -b.T @ r, a]
    ])

    return c_mat


def _dsd46():
    cmat =np.array([[ 0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
        [ 1,  0,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1],
        [ 1,  1,  0,  1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1,  -1, -1,  1,  1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1],
        [ 1,  1,  1,  0,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1, -1,  -1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1,  1,  1,  1, -1,  -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1],
        [ 1, -1, -1,  1,  0,  1,  1, -1,  1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1],
        [ 1,  1, -1, -1,  1,  0,  1, -1, -1,  1,  1, -1,  1,  1,  1, -1,  -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1,  -1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1],
        [ 1, -1,  1, -1,  1,  1,  0,  1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1,  1,  1, -1,  -1, -1, -1, -1, -1,  1,  1, -1,  1, -1,  1, -1,  1,  1],
        [ 1, -1,  1, -1, -1, -1,  1,  0,  1,  1,  1, -1,  1,  1,  1, -1,  -1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1, -1,  1, -1,  1, -1,  1,  1],
        [ 1, -1, -1,  1,  1, -1, -1,  1,  0,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  -1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1,  1, -1,  1],
        [ 1,  1, -1, -1, -1,  1, -1,  1,  1,  0, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1,  -1, -1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1],
        [ 1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  0,  1,  1, -1,  1, -1,  -1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1,  -1,  1, -1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1],
        [ 1,  1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  0,  1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1, -1,  1, -1,  -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1],
        [ 1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  0,  1, -1, -1,  -1,  1, -1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1, -1,  1, -1,  -1,  1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1],
        [ 1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  0,  1,  1,  -1,  1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1,  1, -1, -1,  1,  -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1],
        [ 1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1,  1,  0,  1,  -1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1,  1,  -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1],
        [ 1,  1,  1, -1,  1, -1,  1, -1,  1,  1, -1,  1, -1,  1,  1,  0,  1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  -1, -1,  1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1],
        [ 1,  1,  1, -1,  1, -1,  1, -1,  1,  1, -1,  1, -1, -1, -1,  1,  0,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1],
        [ 1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1, -1, -1,  1,  0,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1],
        [ 1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1, -1,  1, -1,  1,  1,  0, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1],
        [ 1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  0,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1],
        [ 1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1, -1,  1,  -1,  1,  1,  1,  0,  1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1,  -1,  1,  1,  1, -1, -1, -1,  1, -1, -1,  1, -1, -1,  1],
        [ 1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  0,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1],
        [ 1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  0,  1,  1, -1,  1, -1, -1,  1,  1,  1,  -1,  1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1],
        [ 1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1,  1,  0,  1, -1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1],
        [ 1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1, -1,  1, -1,  1,  -1,  1,  1, -1,  1, -1,  1,  1,  0,  1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1],
        [ 1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1, -1,  1, -1,  1,  -1,  1,  1, -1,  1, -1, -1, -1,  1,  0,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1],
        [ 1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1, -1, -1,  1,  0,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1],
        [ 1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1, -1,  1, -1,  1,  1,  0, -1,  1,  1,  1,  -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1],
        [ 1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1,  1,  1,  1,  -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  0,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1],
        [ 1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  0,  1, -1,  -1,  1,  1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1],
        [ 1, -1, -1,  1, -1, -1,  1, -1, -1,  1,  1,  1,  1, -1, -1, -1,  -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  0,  1,  -1, -1, -1,  1, -1,  1, -1,  1,  1,  1, -1, -1,  1,  1],
        [ 1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  0,  1,  1, -1,  1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1],
        [ 1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1,  1,  0,  1, -1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1],
        [ 1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1, -1,  -1, -1, -1,  1,  1, -1,  1, -1,  1, -1,  1,  1, -1,  1, -1,  1,  1,  0,  1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1],
        [ 1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  -1, -1, -1,  1,  1, -1,  1, -1,  1, -1,  1,  1, -1,  1, -1, -1,  -1,  1,  0,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1],
        [ 1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1,  -1, -1,  1,  0,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1],
        [ 1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1, -1,  -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1, -1,  1, -1,  1,  1,  0, -1,  1,  1,  1, -1,  1,  1,  1, -1],
        [ 1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1,  -1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  0,  1,  1, -1,  1, -1, -1, -1,  1],
        [ 1, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1, -1,  1, -1, -1,  1,  -1, -1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  -1,  1, -1,  1,  1,  1,  0,  1, -1, -1,  1,  1, -1, -1],
        [ 1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1, -1,  1, -1, -1,  1,  -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  0,  1, -1, -1, -1,  1, -1],
        [ 1, -1,  1,  1,  1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  0,  1,  1, -1,  1, -1],
        [ 1,  1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1,  1,  0,  1, -1, -1,  1],
        [ 1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1, -1,  1,  -1,  1, -1,  1,  1, -1,  1, -1,  1,  1,  0,  1, -1, -1],
        [ 1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1,  1, -1, -1,  1, -1,  -1,  1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1, -1,  1,  -1,  1, -1,  1,  1, -1,  1, -1, -1, -1,  1,  0,  1,  1],
        [ 1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1, -1,  -1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1, -1, -1,  1,  0,  1],
        [ 1, -1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1,  -1,  1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1, -1,  1, -1,  1,  1,  0]
        ])
    return cmat


def _get_dsd(n_fac: int, c_mat: np.ndarray) ->np.ndarray:
    '''
    create a definitive screening design from conference matrix

    Parameters
    ----------
    n_fac: int
        number of factors used in the experiment
    c_mat: np.ndarray
        conference matrix 
    
    Returns
    -------
    d_mat(: np.ndarray(2(n_fac+n_fake) + 1) * n_fac) if n_fac+n_fake is even)
        experiment design of dsd
        n_fake = len(c_mat) - n_fac
    
    Note
    ----
    The design matrix for a DSD can be written as
    ([C],
     [C],
     [zeros(1, len(C))]
    )
    '''
    zero_vec = np.array([0 for i in range(len(c_mat))]).reshape(1, -1)
    d_mat = np.concatenate([c_mat, -c_mat, zero_vec], axis=0)[:, :n_fac]

    return d_mat
