"""
Test for Definitive Screening Design reference module
"""

import numpy as np
import pytest

import tagupy.design.generator._dsd_ref as ref


@pytest.fixture
def correct_input():
    arg = (
        (ref._cmateq5, [4, 6, 8, 12, 14, 18, 20, 24, 30, 32, 38, 42, 44, 48]),
        (ref._cmateq2, [10, 22, 26, 34, 50]),
        (ref._dsddb, [16, 40]),
        (ref._dsdeq3, [28, 36]),
        (ref._dsd46, [46]))


def test_cmat_valid_output(correct_input):
    for func, num in correct_input:
        for sum_fac in num:
            #test for c_mat
            if sum_fac == 46:
                c_mat = func()
            else:
                c_mat = func(sum_fac, ref._gen_vec)
            #type
            assert isinstance(c_mat, np.ndarray),\
                f'Error: dtype of c_mat expected np.ndarray, got{type(c_mat)}'
            #shape
            cor_shape = (sum_fac, sum_fac)
            ret_shape = c_mat.shape
            assert cor_shape == ret_shape,\
                f'Error: shape not matched > expected: {cor_shape}, got: {ret_shape}'
            #element
            assert ((c_mat == 0) | (c_mat == 1) | (c_mat == -1)).all(),\
                f'Error: all the elements in c_mat should be either 0, -1, or 1, got {c_mat}'
            #diagonal
            diag = np.diag(c_mat)
            assert (diag == 0).all(),\
                f'Error: c_mat expected a matrix with zere diagonal, got {diag}'
            #identity matrix
            assert (c_mat @ c_mat.T == (sum_fac - 1) * np.eye(sum_fac)).all(),\
                f'Error: c_mat expected to satisfy CC′ = (m − 1)I_m,m, got {c_mat @ c_mat.T}'
            #zero only diagonal
            if sum_fac != 22:
                zeros = np.count_nonzero(c_mat == 0)
                assert zeros == sum_fac,\
                    f'Error: only diagonal expected zero, got {zeros} zeros'
            #test for dsd generated by correct cmat
            for i in [0, 1]:
                n_fake = 2
                n_fac = sum_fac - n_fake - i
                #type
                d_mat = ref._get_dsd(n_fac, c_mat)
                assert isinstance(d_mat, np.ndarray),\
                    f'Error: dtype of d_mat expected np.ndarray, got{type(d_mat)}'
                #shape
                cor_shape = ((2 * sum_fac - 1), n_fac)
                ret_shape = d_mat.shape
                assert cor_shape == ret_shape,\
                    f'Error: shape not matched > expected: {cor_shape}, got: {ret_shape}'
                #element
                assert ((c_mat == 0) | (c_mat == 1) | (c_mat == -1)).all(),\
                    f'Error: all the elements in d_mat should be either 0, -1, or 1, got {d_mat}'
            
            
     